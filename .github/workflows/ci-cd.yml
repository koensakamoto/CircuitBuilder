name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: circuitbuilder
  AWS_REGION: us-west-2
  ECR_REPOSITORY: circuitbuilder-ecr

jobs:
  test:
    name: Run Tests and Coverage
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image
      run: |
        docker build -f Dockerfile.test -t ${{ env.DOCKER_IMAGE }}:test .

    - name: Run tests with coverage
      run: |
        # Create test-reports directory on host
        mkdir -p test-reports
        # Run tests and mount test-reports directory
        docker run --rm \
          -v ${{ github.workspace }}/test-reports:/app/test-reports \
          ${{ env.DOCKER_IMAGE }}:test
        # List generated reports for debugging
        echo "Generated test reports:"
        ls -la test-reports/
        # Check if test results exist
        if [ ! -f test-reports/test-results.xml ]; then
          echo "Error: test-results.xml not found"
          exit 1
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: test-reports/test-results.xml

    - name: Upload coverage reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          test-reports/coverage.xml
          test-reports/html/

    - name: Code Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: test-reports/coverage.xml
        badge: true
        fail_below_min: true
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '60 90'

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} .
        docker tag ${{ env.DOCKER_IMAGE }}:${{ github.sha }} ${{ env.DOCKER_IMAGE }}:latest

    - name: Save Docker image
      run: |
        docker save ${{ env.DOCKER_IMAGE }}:${{ github.sha }} | gzip > circuitbuilder.tar.gz

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: circuitbuilder.tar.gz

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image

    - name: Load and push Docker image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker load < circuitbuilder.tar.gz
        docker tag ${{ env.DOCKER_IMAGE }}:${{ github.sha }} $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:staging
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:staging

    - name: Deploy to EC2 Staging
      id: deploy
      run: |
        # Deploy using AWS SSM or SSH
        aws ssm send-command \
          --instance-ids ${{ secrets.EC2_STAGING_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters commands=["\
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:staging && \
            docker stop circuitbuilder-staging || true && \
            docker rm circuitbuilder-staging || true && \
            docker run -d \
              --name circuitbuilder-staging \
              -p 8080:80 \
              --restart unless-stopped \
              ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:staging\
          "] \
          --output text
        echo "url=http://${{ secrets.EC2_STAGING_IP }}:8080" >> $GITHUB_OUTPUT

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image

    - name: Load and push Docker image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker load < circuitbuilder.tar.gz
        docker tag ${{ env.DOCKER_IMAGE }}:${{ github.sha }} $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:production
        docker tag ${{ env.DOCKER_IMAGE }}:${{ github.sha }} $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:production
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest

    - name: Deploy to EC2 Production
      id: deploy
      run: |
        # Deploy using AWS SSM or SSH
        aws ssm send-command \
          --instance-ids ${{ secrets.EC2_PRODUCTION_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters commands=["\
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:production && \
            docker stop circuitbuilder || true && \
            docker rm circuitbuilder || true && \
            docker run -d \
              --name circuitbuilder \
              -p 80:80 \
              --restart always \
              ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:production\
          "] \
          --output text
        echo "url=http://${{ secrets.EC2_PRODUCTION_IP }}" >> $GITHUB_OUTPUT

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image

    - name: Load Docker image
      run: docker load < circuitbuilder.tar.gz

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'