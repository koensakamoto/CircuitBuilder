name: Build and Test CircuitBuilder

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: circuitbuilder

jobs:
  test:
    name: Run Tests and Coverage
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image
      run: |
        docker build -f Dockerfile.test -t ${{ env.DOCKER_IMAGE }}:test .

    - name: Run tests with coverage
      run: |
        # Create test-reports directory on host
        mkdir -p test-reports
        # Run tests and mount test-reports directory
        docker run --rm \
          -v ${{ github.workspace }}/test-reports:/app/test-reports \
          ${{ env.DOCKER_IMAGE }}:test
        # List generated reports for debugging
        echo "Generated test reports:"
        ls -la test-reports/
        # Check if test results exist
        if [ ! -f test-reports/test-results.xml ]; then
          echo "Error: test-results.xml not found"
          exit 1
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: test-reports/test-results.xml

    - name: Upload coverage reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          test-reports/coverage.xml
          test-reports/html/

    - name: Code Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: test-reports/coverage.xml
        badge: true
        fail_below_min: true
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '60 90'

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md

  build:
    name: Build Desktop Application
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} .
        docker tag ${{ env.DOCKER_IMAGE }}:${{ github.sha }} ${{ env.DOCKER_IMAGE }}:latest

    - name: Extract application binary
      run: |
        # Create container and extract built application
        docker create --name extract ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        docker cp extract:/app/CircuitBuilderApp ./CircuitBuilderApp-Linux
        docker rm extract

    - name: Upload Linux binary
      uses: actions/upload-artifact@v4
      with:
        name: circuitbuilder-linux
        path: CircuitBuilderApp-Linux

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Linux binary
      uses: actions/download-artifact@v4
      with:
        name: circuitbuilder-linux

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          CircuitBuilderApp-Linux
        body: |
          ## CircuitBuilder ${{ github.ref_name }}

          ### Download and Run

          **Linux:**
          ```bash
          chmod +x CircuitBuilderApp-Linux
          ./CircuitBuilderApp-Linux
          ```

          **Docker (Any Platform):**
          ```bash
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          docker run -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix ${{ env.DOCKER_IMAGE }}:latest
          ```

          ### What's New
          - Educational digital logic circuit simulator
          - Drag-and-drop logic gates
          - Real-time circuit simulation
          - Truth table generation

          Built with Qt 6 and C++17.

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image for scanning
      run: |
        docker build -t ${{ env.DOCKER_IMAGE }}:scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE }}:scan
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'