name: Build and Test CircuitBuilder

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: circuitbuilder

jobs:
  test:
    name: Run Tests and Coverage
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image
      run: |
        docker build -f Dockerfile.test -t ${{ env.DOCKER_IMAGE }}:test .

    - name: Run tests with coverage
      run: |
        # Create test-reports directory on host
        mkdir -p test-reports
        # Run tests and mount test-reports directory
        docker run --rm \
          -v ${{ github.workspace }}/test-reports:/app/test-reports \
          ${{ env.DOCKER_IMAGE }}:test
        # List generated reports for debugging
        echo "Generated test reports:"
        ls -la test-reports/
        # Check if test results exist
        if [ ! -f test-reports/test-results.xml ]; then
          echo "Error: test-results.xml not found"
          exit 1
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: test-reports/test-results.xml

    - name: Upload coverage reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          test-reports/coverage.xml
          test-reports/html/

    - name: Code Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: test-reports/coverage.xml
        badge: true
        fail_below_min: true
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '60 90'

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md

  build:
    name: Build Desktop Application
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            qt_version: '6.5.0'
            qt_target: 'desktop'
            artifact_name: 'CircuitBuilderApp-Linux'
            qt_arch: ''
          - os: macos-latest
            qt_version: '6.5.0'
            qt_target: 'desktop'
            artifact_name: 'CircuitBuilderApp.dmg'
            qt_arch: ''
          - os: windows-latest
            qt_version: '6.5.0'
            qt_target: 'desktop'
            artifact_name: 'CircuitBuilderApp.exe'
            qt_arch: 'win64_msvc2019_64'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt_version }}
        target: ${{ matrix.qt_target }}
        arch: ${{ matrix.qt_arch }}
        cache: true

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libgl1-mesa-dev

    - name: Install macOS dependencies
      if: runner.os == 'macOS'
      run: |
        brew install create-dmg

    - name: Build application
      run: |
        qmake CircuitBuilder.pro
        make -j$(nproc)
      shell: bash

    - name: Create Windows installer
      if: runner.os == 'Windows'
      run: |
        windeployqt.exe CircuitBuilderApp.exe
        copy CircuitBuilderApp.exe ${{ matrix.artifact_name }}
      shell: cmd

    - name: Create macOS DMG
      if: runner.os == 'macOS'
      run: |
        macdeployqt CircuitBuilderApp.app
        create-dmg --volname "CircuitBuilder" --window-pos 200 120 --window-size 600 300 --icon-size 100 --app-drop-link 425 120 ${{ matrix.artifact_name }} CircuitBuilderApp.app

    - name: Prepare Linux binary
      if: runner.os == 'Linux'
      run: |
        mv CircuitBuilderApp ${{ matrix.artifact_name }}
        chmod +x ${{ matrix.artifact_name }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: circuitbuilder-${{ runner.os }}
        path: ${{ matrix.artifact_name }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: ls -la artifacts/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/circuitbuilder-Linux/CircuitBuilderApp-Linux
          artifacts/circuitbuilder-macOS/CircuitBuilderApp.dmg
          artifacts/circuitbuilder-Windows/CircuitBuilderApp.exe
        body: |
          ## CircuitBuilder ${{ github.ref_name }}

          üéì **Educational Digital Logic Circuit Simulator**

          ### Download for Your Platform

          | Platform | Download | Instructions |
          |----------|----------|--------------|
          | üêß **Linux** | `CircuitBuilderApp-Linux` | `chmod +x CircuitBuilderApp-Linux && ./CircuitBuilderApp-Linux` |
          | üçé **macOS** | `CircuitBuilderApp.dmg` | Double-click to install, then run from Applications |
          | ü™ü **Windows** | `CircuitBuilderApp.exe` | Double-click to run |

          ### What's New in This Release
          - ‚ú® Interactive drag-and-drop logic gates (AND, OR, NOT, NAND, NOR, XOR, XNOR)
          - ‚ö° Real-time circuit simulation with visual feedback
          - üìä Automatic truth table generation
          - üéØ Progressive learning with 12 educational levels
          - üß™ Physics-based gate movement with collision detection

          ### System Requirements
          - **Linux**: X11 display server
          - **macOS**: macOS 10.15+ (Catalina or newer)
          - **Windows**: Windows 10 or newer

          Built with Qt 6 and C++17 | Perfect for students learning digital logic!

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image for scanning
      run: |
        docker build -t ${{ env.DOCKER_IMAGE }}:scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE }}:scan
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'